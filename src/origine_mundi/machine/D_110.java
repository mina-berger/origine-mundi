/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package origine_mundi.machine;

import origine_mundi.SysexBuilder;
import static origine_mundi.OmUtil.MICRO_LITE_4;
import origine_mundi.SysexDataModel;
import origine_mundi.SysexDataModel.BitArray;
import origine_mundi.SysexDataModel.Blank;
import origine_mundi.SysexDataModel.ByteValue;
import origine_mundi.SysexDataModel.ByteValues;
import origine_mundi.SysexDataModel.Characters;
import origine_mundi.SysexDataModel.CodeValue;
import origine_mundi.SysexDataModel.D110BiasPoint;
import origine_mundi.SysexDataModel.DataBlock;
import origine_mundi.SysexDataModel.DataUnitIndex;
import origine_mundi.SysexDataModel.KV;
import origine_mundi.SysexDataModel.MidiChannel;
import origine_mundi.SysexDataModel.NoteValue;
import origine_mundi.SysexDataModel.OffsetBinaries;
import origine_mundi.SysexDataModel.OffsetBinary;
import origine_mundi.SysexDataModel.OnOffValue;
import origine_mundi.UpdateMap;

/**
 *
 * @author Mina
 */
public class D_110 extends Roland {
    private static final int DEVICE_ID = 0x10; // SET ON D_110
    private static final int MODEL_ID = 0x16; //D_110
    private static final String MIDI_PORT = MICRO_LITE_4;
    private static D_110 instance = null;
    public static D_110 instance(){
        if(instance == null){
            instance = new D_110();
        }
        return instance;
    }
    private D_110(){
        super(DEVICE_ID, MODEL_ID, MIDI_PORT, MIDI_PORT);
    }
    private static final DataBlock TIMBRE_COMMON_BLOCK = new DataBlock("common",
            new CodeValue("tone group", 0, 3, new KV(0, "a"), new KV(1, "b"), new KV(2, "i/c"), new KV(3, "r")),
            new ByteValue("tone number", 0, 63),
            new OffsetBinary("key shift", 0, 48, 24),
            new OffsetBinary("fine tune", 0, 100, 50),
            new ByteValue("bender range", 0, 24),
            new CodeValue("assign mode", 0, 3, new KV(0, "POLY0"), new KV(1, "POLY1"), new KV(2, "POLY2"), new KV(3, "POLY3")),
            new CodeValue("output assign", 0, 7, new KV(0, "MIX0"), new KV(1, "MIX1"), 
                    new KV(2, "MULTI0"), new KV(3, "MULTI1"), new KV(4, "MULTI2"), new KV(5, "MULTI3"), new KV(6, "MULTI4"), new KV(7, "MULTI5")),
            new Blank("dummy", 1)
    );
    private static final DataBlock TIMBRE_TEMPORARY_BLOCK = new DataBlock("temporary",
            new ByteValue("output level", 0, 100),
            new OffsetBinary("panpod", 0, 14, 7),
            new NoteValue("key range lower"),
            new NoteValue("key range upper"),
            new Blank("dummy", 4)
    );
    private static final SysexDataModel TIMBRE_TEMPORARY = new SysexDataModel("timbre",
            new ByteValues("address", 3),
            TIMBRE_COMMON_BLOCK,
            TIMBRE_TEMPORARY_BLOCK
    );
    
    private static final CodeValue PARTIAL_STRUCTURE = new CodeValue("partial structure model",
            new KV(0, "S & S Mix"), 
            new KV(1, "S & S Prim and Ring Mix"), 
            new KV(2, "P & S Mix"),
            new KV(3, "P & S Prim and Ring Mix"),
            new KV(4, "S & P Prim and Ring Mix"),
            new KV(5, "P & P Mix"),
            new KV(6, "P & P Prim and Ring Mix"),
            new KV(7, "S & S Stereo"),
            new KV(8, "P & P Stereo"),
            new KV(9, "S & S Ring"),
            new KV(10, "P & S Ring"),
            new KV(11, "S & P Ring"),
            new KV(12, "P & P Ring")
    );
    private static final DataBlock PARTIAL_BLOCK = new DataBlock("partial model",
            new NoteValue("WG pitch coarse", 0, 96, 24),
            new OffsetBinary("WG pitch fine", 0, 100, 50),
            new CodeValue("WG pitch keyfollow", 0, 0x10,
                    new KV(0x00, "-1" ), new KV(0x01, "-1/2"), new KV(0x02, "-1/4"), new KV(0x03, "0"  ), new KV(0x04, "1/8"), new KV(0x05, "1/4"), 
                    new KV(0x06, "3/8"), new KV(0x07, "1/2" ), new KV(0x08, "5/8" ), new KV(0x09, "3/4"), new KV(0x0a, "7/8"), new KV(0x0b, "1"), 
                    new KV(0x0c, "5/4"), new KV(0x0d, "3/2" ), new KV(0x0e, "2"   ), new KV(0x0f, "s1" ), new KV(0x10, "s2")),
            new OnOffValue("WG pitch benderSW", 0, 0, 1),
            new CodeValue("WG wave form/pcm bank", 0, 3, new KV(0, "SQU/1"), new KV(1, "SAW/1"), new KV(2, "SQU/2"), new KV(3, "SAW/2")),
            new ByteValue("WG pcm wave #"),
            new ByteValue("WG pulse width", 0, 100),
            new OffsetBinary("WG PW velo sens", 0, 14, 7),
            new ByteValue("P-ENV depth", 0, 10),
            new ByteValue("P-ENV velo sens", 0, 100),
            new ByteValue("P-ENV time keyfollow", 0, 4),
            new ByteValues("P-ENV times", 4, 0, 100),
            new OffsetBinaries("P-ENV levels", 3, 0, 100, 50),
            new OffsetBinary("P-ENV sustain level", 0, 100, 50),//50 50 50
            new OffsetBinary("P-ENV end level", 0, 100, 50),
            new ByteValue("P-LFO rate", 0, 100),
            new ByteValue("P-LFO depth", 0, 100),
            new ByteValue("P-LFO mod sens", 0, 100),
            new ByteValue("TVF cutoff freq", 0, 100),
            new ByteValue("TVF resonance", 0, 30),
            new CodeValue("TVF keyfollow", 0, 0x0e,
                    new KV(0x00, "-1" ), new KV(0x01, "-1/2"), new KV(0x02, "-1/4"), new KV(0x03, "0"  ), new KV(0x04, "1/8"), new KV(0x05, "1/4"), 
                    new KV(0x06, "3/8"), new KV(0x07, "1/2" ), new KV(0x08, "5/8" ), new KV(0x09, "3/4"), new KV(0x0a, "7/8"), new KV(0x0b, "1"), 
                    new KV(0x0c, "5/4"), new KV(0x0d, "3/2" ), new KV(0x0e, "2"   )),
            new D110BiasPoint("TVF bias point"),
            new OffsetBinary("TVF bias level", 0, 14, 7),
            new ByteValue("TVF ENV depth", 0, 100),
            new ByteValue("TVF ENV velo sens", 0, 100),
            new ByteValue("TVF ENV depth keyfollow", 0, 4),
            new ByteValue("TVF ENV time keyfollow", 0, 4),
            new ByteValues("TVF ENV times", 5, 0, 100),
            new ByteValues("TVF ENV levels", 3, 0, 100),
            new ByteValue("TVF ENV sustain level", 0, 100),
            new ByteValue("TVA level", 0, 100),
            new ByteValue("TVA velo sens", 0, 100),
            new D110BiasPoint("TVA bias point1"),
            new OffsetBinary("TVA bias level1", 0, 12, 12),
            new D110BiasPoint("TVA bias point2"),
            new OffsetBinary("TVA bias level2", 0, 12, 12),
            new ByteValue("TVA time keyfollow", 0, 4),
            new ByteValue("TVA time v_follow", 0, 4),
            new ByteValues("TVA times", 5, 0, 100),
            new ByteValues("TVA levels", 3, 0, 100),
            new ByteValue("TVA sustain level", 0, 100)
        );
    private static final SysexDataModel TONE = new SysexDataModel("tone",
            new ByteValues("address", 3),
            new DataBlock("common",
                new Characters("name", 10),
                PARTIAL_STRUCTURE.copy("partial structure 0 & 1"),
                PARTIAL_STRUCTURE.copy("partial structure 2 & 3"),
                new BitArray("partial mute", "bit:0000[3][2][1][0]", 4, true),
                new CodeValue("env mode", 0, 1, new KV(0, "Normal"), new KV(1, "No sustain"))),
            PARTIAL_BLOCK.copy("partial0"),
            PARTIAL_BLOCK.copy("partial1"),
            PARTIAL_BLOCK.copy("partial2"),
            PARTIAL_BLOCK.copy("partial3")
        );
    public static int[][] TONE_TEMP = new int[][]{
        new int[]{0x04, 0x00, 0x00, 0x45, 0x6c, 0x65, 0x63, 0x50, 0x69, 0x61, 0x6e, 0x6f, 0x31, 0x01, 0x00, 0x07, 0x00, 0x24, 0x37, 0x0f, 0x01, 0x00, 0x00, 0x3c, 0x07, 0x03, 0x00, 0x01, 0x0a, 0x07, 0x16, 0x00, 0x32, 0x42, 0x33, 0x32, 0x32, 0x00, 0x00, 0x00, 0x35, 0x00, 0x07, 0x16, 0x08, 0x29, 0x28, 0x00, 0x02, 0x00, 0x20, 0x3b, 0x64, 0x52, 0x64, 0x47, 0x29, 0x00, 0x5a, 0x55, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x00, 0x00, 0x32, 0x47, 0x64, 0x38, 0x64, 0x52, 0x28, 0x00, 0x4e, 0x47, 0x07, 0x01, 0x00, 0x00, 0x21, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x1d, 0x01, 0x09, 0x61, 0x0a, 0x64, 0x00, 0x00, 0x03, 0x00, 0x1a, 0x40, 0x4b, 0x1d, 0x64, 0x38, 0x14, 0x00, 0x47, 0x3c, 0x5b, 0x0c, 0x33, 0x08, 0x01, 0x01, 0x00, 0x28, 0x3d, 0x4a, 0x64, 0x64, 0x36, 0x23, 0x06, 0x30, 0x2d, 0x0f, 0x01, 0x01, 0x00, 0x3c, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x32, 0x34, 0x30, 0x30, 0x31, 0x3e, 0x08, 0x42, 0x37, 0x00, 0x07, 0x16, 0x09, 0x28, 0x28, 0x00, 0x02, 0x00, 0x18, 0x3b, 0x64, 0x52, 0x64, 0x47, 0x29, 0x00, 0x5a, 0x55, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x00, 0x00, 0x32, 0x47, 0x64, 0x33, 0x64, 0x52, 0x28, 0x00, 0x30, 0x2d, 0x0f, 0x01, 0x01, 0x00, 0x3c, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x32, 0x34, 0x30, 0x30, 0x31, 0x3e, 0x08, 0x42, 0x37, 0x00, 0x07, 0x16, 0x09, 0x28, 0x28, 0x00, 0x02, 0x00, 0x18, 0x3b, 0x64, 0x52, 0x64, 0x47, 0x29, 0x00, 0x5a, 0x55, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x00, 0x00, 0x32, 0x47, 0x64, 0x33, 0x64, 0x52, 0x28, 0x00},
        new int[]{0x04, 0x01, 0x76, 0x53, 0x79, 0x6e, 0x20, 0x42, 0x61, 0x73, 0x73, 0x20, 0x33, 0x00, 0x00, 0x03, 0x00, 0x18, 0x39, 0x10, 0x01, 0x01, 0x00, 0x2c, 0x06, 0x06, 0x03, 0x00, 0x01, 0x00, 0x03, 0x29, 0x32, 0x64, 0x2a, 0x32, 0x29, 0x40, 0x07, 0x1e, 0x3c, 0x0f, 0x09, 0x30, 0x09, 0x32, 0x64, 0x00, 0x01, 0x00, 0x18, 0x1e, 0x32, 0x2d, 0x64, 0x64, 0x52, 0x28, 0x62, 0x41, 0x5b, 0x0a, 0x1b, 0x0c, 0x02, 0x04, 0x00, 0x0f, 0x1a, 0x5f, 0x3c, 0x64, 0x5c, 0x54, 0x23, 0x18, 0x2c, 0x10, 0x01, 0x00, 0x00, 0x3b, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3d, 0x0f, 0x38, 0x3c, 0x17, 0x09, 0x30, 0x09, 0x32, 0x64, 0x00, 0x01, 0x00, 0x18, 0x2c, 0x32, 0x2d, 0x63, 0x53, 0x37, 0x28, 0x5f, 0x41, 0x5b, 0x09, 0x1b, 0x0a, 0x02, 0x04, 0x00, 0x0f, 0x1a, 0x5f, 0x3c, 0x64, 0x5c, 0x54, 0x23, 0x18, 0x2c, 0x10, 0x01, 0x00, 0x00, 0x3b, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3d, 0x0f, 0x38, 0x3c, 0x17, 0x09, 0x30, 0x09, 0x32, 0x64, 0x00, 0x01, 0x00, 0x18, 0x2c, 0x32, 0x2d, 0x63, 0x53, 0x37, 0x28, 0x5f, 0x41, 0x5b, 0x09, 0x1b, 0x0a, 0x02, 0x04, 0x00, 0x0f, 0x1a, 0x5f, 0x3c, 0x64, 0x5c, 0x54, 0x23, 0x18, 0x2c, 0x10, 0x01, 0x00, 0x00, 0x3b, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3d, 0x0f, 0x38, 0x3c, 0x17, 0x09, 0x30, 0x09, 0x32, 0x64, 0x00, 0x01, 0x00, 0x18, 0x2c, 0x32, 0x2d, 0x63, 0x53, 0x37, 0x28, 0x5f, 0x41, 0x5b, 0x09, 0x1b, 0x0a, 0x02, 0x04, 0x00, 0x0f, 0x1a, 0x5f, 0x3c, 0x64, 0x5c, 0x54, 0x23},
        new int[]{0x04, 0x03, 0x6c, 0x46, 0x72, 0x65, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x32, 0x02, 0x00, 0x03, 0x00, 0x24, 0x32, 0x10, 0x01, 0x00, 0x39, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x3e, 0x5b, 0x09, 0x1b, 0x0c, 0x00, 0x00, 0x0c, 0x26, 0x37, 0x2d, 0x2e, 0x64, 0x5f, 0x00, 0x00, 0x24, 0x3c, 0x10, 0x01, 0x01, 0x00, 0x52, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3c, 0x0b, 0x4d, 0x3e, 0x0d, 0x0b, 0x1e, 0x0a, 0x1d, 0x0c, 0x00, 0x01, 0x07, 0x21, 0x28, 0x34, 0x64, 0x0d, 0x36, 0x1b, 0x00, 0x4b, 0x4b, 0x5b, 0x09, 0x1b, 0x0c, 0x04, 0x00, 0x16, 0x1b, 0x39, 0x54, 0x42, 0x49, 0x64, 0x43, 0x00, 0x24, 0x3c, 0x10, 0x01, 0x01, 0x00, 0x52, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3c, 0x0b, 0x4d, 0x3e, 0x0d, 0x0b, 0x1e, 0x0a, 0x1d, 0x0c, 0x00, 0x01, 0x07, 0x21, 0x28, 0x34, 0x64, 0x0d, 0x36, 0x1b, 0x00, 0x4b, 0x4b, 0x5b, 0x09, 0x1b, 0x0c, 0x04, 0x00, 0x16, 0x1b, 0x39, 0x54, 0x42, 0x49, 0x64, 0x43, 0x00, 0x24, 0x3c, 0x10, 0x01, 0x01, 0x00, 0x52, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3c, 0x0b, 0x4d, 0x3e, 0x0d, 0x0b, 0x1e, 0x0a, 0x1d, 0x0c, 0x00, 0x01, 0x07, 0x21, 0x28, 0x34, 0x64, 0x0d, 0x36, 0x1b, 0x00, 0x4b, 0x4b, 0x5b, 0x09, 0x1b, 0x0c, 0x04, 0x00, 0x16, 0x1b, 0x39, 0x54, 0x42, 0x49, 0x64, 0x43, 0x00},
        new int[]{0x04, 0x05, 0x62, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x50, 0x61, 0x64, 0x20, 0x07, 0x02, 0x07, 0x00, 0x24, 0x37, 0x10, 0x01, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x40, 0x0c, 0x23, 0x2c, 0x0a, 0x08, 0x33, 0x0a, 0x3c, 0x64, 0x02, 0x03, 0x0f, 0x04, 0x20, 0x2d, 0x39, 0x52, 0x1f, 0x61, 0x3a, 0x5f, 0x4e, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x04, 0x06, 0x0a, 0x0a, 0x11, 0x3a, 0x3c, 0x5c, 0x64, 0x64, 0x24, 0x2d, 0x10, 0x01, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3e, 0x0c, 0x31, 0x2c, 0x0a, 0x08, 0x33, 0x0a, 0x3c, 0x64, 0x02, 0x00, 0x0f, 0x04, 0x20, 0x2d, 0x39, 0x52, 0x1f, 0x61, 0x3a, 0x5f, 0x4e, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x04, 0x00, 0x05, 0x0a, 0x11, 0x3a, 0x54, 0x5f, 0x64, 0x64, 0x1f, 0x32, 0x0b, 0x01, 0x00, 0x2a, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x64, 0x6f, 0x05, 0x1b, 0x06, 0x00, 0x00, 0x00, 0x3c, 0x41, 0x00, 0x48, 0x64, 0x4a, 0x00, 0x00, 0x1f, 0x32, 0x0b, 0x01, 0x00, 0x2a, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x64, 0x6f, 0x05, 0x1b, 0x06, 0x00, 0x00, 0x00, 0x3c, 0x41, 0x00, 0x48, 0x64, 0x4a, 0x00, 0x00},
        new int[]{0x04, 0x07, 0x58, 0x54, 0x72, 0x75, 0x6d, 0x70, 0x65, 0x74, 0x20, 0x32, 0x20, 0x02, 0x00, 0x03, 0x00, 0x24, 0x25, 0x0f, 0x01, 0x00, 0x24, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x3c, 0x67, 0x07, 0x1b, 0x06, 0x02, 0x01, 0x00, 0x27, 0x34, 0x3a, 0x28, 0x64, 0x64, 0x45, 0x00, 0x30, 0x32, 0x0f, 0x01, 0x01, 0x00, 0x00, 0x07, 0x06, 0x01, 0x00, 0x0b, 0x0b, 0x1c, 0x24, 0x41, 0x27, 0x37, 0x32, 0x34, 0x38, 0x05, 0x1a, 0x49, 0x10, 0x09, 0x1f, 0x0a, 0x39, 0x51, 0x00, 0x03, 0x19, 0x21, 0x24, 0x2d, 0x52, 0x4b, 0x60, 0x38, 0x19, 0x58, 0x45, 0x6c, 0x05, 0x1b, 0x0c, 0x02, 0x03, 0x08, 0x2d, 0x34, 0x2b, 0x23, 0x64, 0x64, 0x60, 0x5a, 0x30, 0x32, 0x0f, 0x01, 0x01, 0x00, 0x00, 0x07, 0x06, 0x01, 0x00, 0x0b, 0x0b, 0x1c, 0x24, 0x41, 0x27, 0x37, 0x32, 0x34, 0x38, 0x05, 0x1a, 0x49, 0x10, 0x09, 0x1f, 0x0a, 0x39, 0x51, 0x00, 0x03, 0x19, 0x21, 0x24, 0x2d, 0x52, 0x4b, 0x60, 0x38, 0x19, 0x58, 0x45, 0x6c, 0x05, 0x1b, 0x0c, 0x02, 0x03, 0x08, 0x2d, 0x34, 0x2b, 0x23, 0x64, 0x64, 0x60, 0x5a, 0x30, 0x32, 0x0f, 0x01, 0x01, 0x00, 0x00, 0x07, 0x06, 0x01, 0x00, 0x0b, 0x0b, 0x1c, 0x24, 0x41, 0x27, 0x37, 0x32, 0x34, 0x38, 0x05, 0x1a, 0x49, 0x10, 0x09, 0x1f, 0x0a, 0x39, 0x51, 0x00, 0x03, 0x19, 0x21, 0x24, 0x2d, 0x52, 0x4b, 0x60, 0x38, 0x19, 0x58, 0x45, 0x6c, 0x05, 0x1b, 0x0c, 0x02, 0x03, 0x08, 0x2d, 0x34, 0x2b, 0x23, 0x64, 0x64, 0x60, 0x5a},
        new int[]{0x04, 0x09, 0x4e, 0x48, 0x6f, 0x6e, 0x6b, 0x79, 0x2d, 0x54, 0x6f, 0x6e, 0x6b, 0x01, 0x02, 0x07, 0x00, 0x24, 0x3c, 0x10, 0x01, 0x00, 0x00, 0x44, 0x08, 0x04, 0x00, 0x01, 0x02, 0x00, 0x07, 0x00, 0x32, 0x64, 0x30, 0x32, 0x32, 0x38, 0x04, 0x43, 0x32, 0x00, 0x06, 0x16, 0x08, 0x43, 0x47, 0x00, 0x02, 0x00, 0x05, 0x3b, 0x47, 0x52, 0x64, 0x47, 0x29, 0x18, 0x64, 0x55, 0x69, 0x0a, 0x1b, 0x0c, 0x01, 0x00, 0x00, 0x32, 0x47, 0x4a, 0x43, 0x64, 0x52, 0x28, 0x00, 0x50, 0x4f, 0x0f, 0x01, 0x00, 0x00, 0x21, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x54, 0x10, 0x06, 0x67, 0x06, 0x64, 0x00, 0x00, 0x02, 0x00, 0x1d, 0x48, 0x4b, 0x1d, 0x58, 0x64, 0x00, 0x00, 0x2d, 0x46, 0x5b, 0x0c, 0x0f, 0x06, 0x01, 0x01, 0x00, 0x28, 0x3d, 0x4a, 0x28, 0x64, 0x3f, 0x28, 0x1e, 0x3c, 0x2e, 0x10, 0x01, 0x00, 0x5c, 0x00, 0x07, 0x02, 0x00, 0x01, 0x07, 0x03, 0x07, 0x00, 0x32, 0x46, 0x30, 0x32, 0x32, 0x38, 0x05, 0x48, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x55, 0x7a, 0x04, 0x5d, 0x0a, 0x01, 0x00, 0x01, 0x32, 0x47, 0x4a, 0x43, 0x64, 0x52, 0x28, 0x00, 0x3c, 0x2e, 0x10, 0x01, 0x00, 0x5c, 0x00, 0x07, 0x02, 0x00, 0x01, 0x07, 0x03, 0x07, 0x00, 0x32, 0x46, 0x30, 0x32, 0x32, 0x38, 0x05, 0x48, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x55, 0x7a, 0x04, 0x5d, 0x0a, 0x01, 0x00, 0x01, 0x32, 0x47, 0x4a, 0x43, 0x64, 0x52, 0x28, 0x00},
        new int[]{0x04, 0x0b, 0x44, 0x53, 0x69, 0x74, 0x61, 0x72, 0x20, 0x20, 0x20, 0x20, 0x20, 0x05, 0x07, 0x0f, 0x00, 0x24, 0x2d, 0x10, 0x01, 0x00, 0x59, 0x00, 0x07, 0x01, 0x01, 0x00, 0x11, 0x10, 0x17, 0x00, 0x24, 0x2c, 0x30, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x57, 0x5b, 0x0c, 0x1b, 0x09, 0x00, 0x00, 0x02, 0x47, 0x34, 0x3f, 0x54, 0x5c, 0x34, 0x11, 0x00, 0x24, 0x34, 0x10, 0x01, 0x00, 0x56, 0x00, 0x07, 0x01, 0x01, 0x00, 0x0b, 0x0a, 0x0f, 0x00, 0x20, 0x38, 0x31, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x46, 0x5b, 0x07, 0x1b, 0x09, 0x00, 0x04, 0x00, 0x03, 0x3d, 0x57, 0x4e, 0x00, 0x64, 0x35, 0x00, 0x30, 0x32, 0x10, 0x01, 0x01, 0x00, 0x40, 0x07, 0x07, 0x03, 0x00, 0x0f, 0x10, 0x22, 0x32, 0x17, 0x21, 0x29, 0x32, 0x32, 0x34, 0x0a, 0x00, 0x55, 0x15, 0x09, 0x5b, 0x04, 0x56, 0x2c, 0x00, 0x00, 0x00, 0x2a, 0x2b, 0x37, 0x47, 0x2c, 0x12, 0x21, 0x0d, 0x52, 0x4b, 0x5b, 0x0c, 0x1b, 0x08, 0x00, 0x04, 0x05, 0x29, 0x2b, 0x53, 0x54, 0x64, 0x60, 0x4a, 0x00, 0x3c, 0x36, 0x10, 0x01, 0x01, 0x00, 0x64, 0x07, 0x06, 0x03, 0x00, 0x07, 0x11, 0x1c, 0x32, 0x17, 0x1d, 0x27, 0x32, 0x32, 0x34, 0x0c, 0x00, 0x3c, 0x0e, 0x09, 0x5b, 0x03, 0x54, 0x2d, 0x00, 0x00, 0x00, 0x23, 0x37, 0x4a, 0x64, 0x54, 0x0a, 0x40, 0x00, 0x54, 0x4b, 0x5b, 0x0c, 0x1b, 0x09, 0x00, 0x04, 0x0e, 0x0c, 0x31, 0x58, 0x53, 0x00, 0x64, 0x5a, 0x00},
        new int[]{0x04, 0x0d, 0x3a, 0x4f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x4a, 0x61, 0x6d, 0x05, 0x08, 0x0f, 0x00, 0x22, 0x32, 0x05, 0x00, 0x02, 0x64, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c, 0x00, 0x00, 0x00, 0x64, 0x64, 0x64, 0x46, 0x64, 0x64, 0x64, 0x64, 0x22, 0x32, 0x05, 0x00, 0x02, 0x6f, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c, 0x00, 0x00, 0x3a, 0x39, 0x00, 0x64, 0x46, 0x00, 0x00, 0x64, 0x64, 0x16, 0x32, 0x05, 0x00, 0x02, 0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c, 0x00, 0x00, 0x1a, 0x23, 0x23, 0x14, 0x64, 0x64, 0x64, 0x64, 0x64, 0x22, 0x32, 0x05, 0x00, 0x02, 0x24, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c, 0x04, 0x00, 0x64, 0x64, 0x34, 0x00, 0x46, 0x00, 0x00, 0x07, 0x64}};
    public static int[] MIDI_CHANNELS_RQT = new int[]{0x10, 0x0, 0xd, 0x00, 0x00, 0x09};
    public static int[] MIDI_CHANNELS_DATA = new int[]{0x10, 0x0, 0xd, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
    public static SysexDataModel MIDI_CHANNELS = new SysexDataModel("Part MIDI Channels",
                        new ByteValues("address", 3),
                        new MidiChannel("part0"), new MidiChannel("part1"), new MidiChannel("part2"), new MidiChannel("part3"),
                        new MidiChannel("part4"), new MidiChannel("part5"), new MidiChannel("part6"), new MidiChannel("part7"),
                        new MidiChannel("partR"));
    
    public static void main(String[] arg) throws Exception {
        
        D_110 d_110 = D_110.instance();
        for(int i = 0;i < 64;i++){
            //d_110.callMemoryTone(i, 0);
            //d_110.checkSound(0);
            System.out.println(i);
            d_110.printToneMemory(i, "common.name");
        }
       /* int[] cutoffs = new int[]{50, 50, 100, 100};
        int[] resonances = new int[]{0, 30, 0, 30};
        AddressDeRoland address;
        for(int i = 0;i < cutoffs.length;i++){
            int cutoff = cutoffs[i];
            int resonance = resonances[i];
            address = new AddressDeRoland(0x04, 0x00, 0x00).shift(TONE.getDataUnitIndex("partial0.TVF cutoff freq").getIndex() - 3);
            d_110.send(d_110.getDT1(new SysexDataModel("cuttoff", 
                new ByteValues("address", 3),
                new ByteValue("TVF cutoff freq", 0, 100), new ByteValue("TVF cutoff resonance", 0, 30)), address.append(cutoff, resonance)).getSysex());
            address = new AddressDeRoland(0x04, 0x00, 0x00).shift(TONE.getDataUnitIndex("partial1.TVF cutoff freq").getIndex() - 3);
            d_110.send(d_110.getDT1(new SysexDataModel("cuttoff", 
                new ByteValues("address", 3),
                new ByteValue("TVF cutoff freq", 0, 100), new ByteValue("TVF cutoff resonance", 0, 30)), address.append(cutoff, resonance)).getSysex());
            address = new AddressDeRoland(0x04, 0x00, 0x00).shift(TONE.getDataUnitIndex("partial2.TVF cutoff freq").getIndex() - 3);
            d_110.send(d_110.getDT1(new SysexDataModel("cuttoff", 
                new ByteValues("address", 3),
                new ByteValue("TVF cutoff freq", 0, 100), new ByteValue("TVF cutoff resonance", 0, 30)), address.append(cutoff, resonance)).getSysex());
            address = new AddressDeRoland(0x04, 0x00, 0x00).shift(TONE.getDataUnitIndex("partial3.TVF cutoff freq").getIndex() - 3);
            d_110.send(d_110.getDT1(new SysexDataModel("cuttoff", 
                new ByteValues("address", 3),
                new ByteValue("TVF cutoff freq", 0, 100), new ByteValue("TVF cutoff resonance", 0, 30)), address.append(cutoff, resonance)).getSysex());
            d_110.checkSound(0);
        }*/
        
        //OK:
        //d_110.get(d_110.getRQT(ADDRESS_TONE_TEMPORARY, LENGTH_TONE_TEMPORARY ), TONE).getExplanations().print();
       /// d_110.get(d_110.getRQT(ADDRESS_TIMBRE_TEMPORARY, LENGTH_TIMBRE_TEMPORARY ), TIMBRE_TEMPORARY).getExplanations().print();
        /*SysexBuilder sb = d_110.getDT1(TONE, data);
        d_110.send(sb.getSysex());
        */
        d_110.checkSound(0);
        d_110.finalize();
        
        
        //d110.send(d110.TEMPORARY_TONE[0].getSysex());
        //checkSound(D_110, 0);
        /*d110.send(d110.getDT1(new Address(0x10, 0x0, 0xd), new int[]{0x00, 0x01, 0x01, 0x04, 0x01, 0x01, 0x07, 0x08, 0x09}).getSysex());*/
        
        //d110.getRQT(new Address(0x10, 0x0, 0xd), new Address(0, 0, 9)).getExplanations().print();
        
        /*D_110 d110 = D_110.instance();
        SysexBuilder ret = d110.get(d110.getRQT(new Address(0x10, 0x0, 0xd), new Address(0, 0, 9)), 
                new SysexDataModel("Part MIDI Channels",
                        new ByteValues("address", 3),
                        new MidiChannel("part0"),
                        new MidiChannel("part1"),
                        new MidiChannel("part2"),
                        new MidiChannel("part3"),
                        new MidiChannel("part4"),
                        new MidiChannel("part5"),
                        new MidiChannel("part6"),
                        new MidiChannel("part7"),
                        new MidiChannel("partR")
                ));
        ret.getExplanations().print();
        //d110.checkSound(0);
        
        d110.finalize();*/
    }
    public static final AddressDeRoland ADDRESS_TONE_TEMPORARY = new AddressDeRoland(0x04, 0x00, 0x00);
    public static final AddressDeRoland ADDRESS_TONE_MEMORY    = new AddressDeRoland(0x08, 0x00, 0x00);
    public static final AddressDeRoland LENGTH_TONE_TEMPORARY  = new AddressDeRoland(0x00, 0x01, 0x76);
    public static final AddressDeRoland LENGTH_TONE_MEMORY     = new AddressDeRoland(0x00, 0x02, 0x00);
    public static final AddressDeRoland ADDRESS_TIMBRE_TEMPORARY = new AddressDeRoland(0x03, 0x00, 0x00);
    public static final AddressDeRoland LENGTH_TIMBRE_TEMPORARY  = new AddressDeRoland(0x00, 0x00, 0x10);
    /*public SysexMessage sysexToneTemporary(int part, String fullname, int... ints){
        DataUnitIndex dui = TONE.getDataUnitIndex(fullname);
        AddressDeRoland address = addressToneTemporary(part).shift(dui.getIndex() - 3);
        SysexDataModel model = new SysexDataModel("update", new ByteValues("address", 3), dui.getDataUnit());
        return getDT1(model, address.append(ints)).getSysex();
    }*/
    public void printToneMemory(int memory_number, String fullname){
        DataUnitIndex dui = TONE.getDataUnitIndex(fullname);
        AddressDeRoland address = addressToneMemory(memory_number).shift(dui.getIndex() - 3);
        SysexDataModel model = new SysexDataModel("update", new ByteValues("address", 3), dui.getDataUnit());
        get(getRQT(address, new AddressDeRoland(0, 0, dui.getDataUnit().length())), model).getExplanations().print();
    }
    public void updateTimbreTemporary(int part, UpdateMap update_map){
        AddressDeRoland address = addressTimbreTemporary(part);
        SysexBuilder sb = get(getRQT(address, LENGTH_TIMBRE_TEMPORARY ), TIMBRE_TEMPORARY);
        sb.update(update_map);
        sb.getExplanations().print();
        send(sb.getSysex());
    }
    public void updateToneTemporary(int part, UpdateMap update_map){
        AddressDeRoland address = addressToneTemporary(part);
        SysexBuilder sb = get(getRQT(address, LENGTH_TONE_TEMPORARY ), TONE);
        sb.update(update_map);
        sb.getExplanations().print();
        send(sb.getSysex());
    }
    public void callMemoryTone(int tone_memory_number, int part_temporary){
        AddressDeRoland address_memory = addressToneMemory(tone_memory_number);
        SysexBuilder tone_memory = get(getRQT(address_memory, LENGTH_TONE_TEMPORARY), TONE);
        AddressDeRoland address_temporary = addressToneTemporary(part_temporary);
        tone_memory.setValue("address", address_temporary);
        tone_memory.getExplanations().print();
        
        send(tone_memory.getSysex());
    }
    public void setChannels(int ch0, int ch1, int ch2, int ch3, int ch4, int ch5, int ch6, int ch7, int ch8){
        send(getDT1(MIDI_CHANNELS,
                new AddressDeRoland(0x10, 0x0, 0xd).append(ch0, ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8)).getSysex());
    }
    private AddressDeRoland addressToneMemory(int tone_memory_number){
        if(tone_memory_number < 0 || tone_memory_number > 63){
            throw new IllegalArgumentException("tone memory number is out of range(" + tone_memory_number + ")");
        }
        return new AddressDeRoland(ADDRESS_TONE_MEMORY, LENGTH_TONE_MEMORY, tone_memory_number);
    }
    private AddressDeRoland addressToneTemporary(int part){
        if(part < 0 || part > 7){
            throw new IllegalArgumentException("part for tone temporary is out of range(" + part + ")");
        }
        return new AddressDeRoland(ADDRESS_TONE_TEMPORARY, LENGTH_TONE_TEMPORARY, part);
    }
    private AddressDeRoland addressTimbreTemporary(int part){
        if(part < 0 || part > 7){
            throw new IllegalArgumentException("part for timbre temporary is out of range(" + part + ")");
        }
        return new AddressDeRoland(ADDRESS_TIMBRE_TEMPORARY, LENGTH_TIMBRE_TEMPORARY, part);
    }
    /*
[00 00] 000 : address                          : 04, 00, 00
[00 03] 003 : common.name                      : 'Warm Bell '
[00 0d] 013 : common.partial structure 0 & 1   : 07 : S & S Stereo
[00 0e] 014 : common.partial structure 2 & 3   : 08 : P & P Stereo
[00 0f] 015 : common.partial mute              : 0f : [****] bit:0000[3][2][1][0]
[00 10] 016 : common.env mode                  : 00 : Normal
[00 11] 017 : partial0.WG pitch coarse         : 24 : C_4
[00 12] 018 : partial0.WG pitch fine           : 37 : +5
[00 13] 019 : partial0.WG pitch keyfollow      : 10 : s2
[00 14] 020 : partial0.WG pitch benderSW       : 01 : on
[00 15] 021 : partial0.WG wave form/pcm bank   : 01 : SAW/1
[00 16] 022 : partial0.WG pcm wave #           : 00 : 0
[00 17] 023 : partial0.WG pulse width          : 2c : 44
[00 18] 024 : partial0.WG PW velo sens         : 07 : 0
[00 19] 025 : partial0.P-ENV depth             : 02 : 2
[00 1a] 026 : partial0.P-ENV velo sens         : 03 : 3
[00 1b] 027 : partial0.P-ENV time keyfollow    : 04 : 4
[00 1c] 028 : partial0.P-ENV times             : 0f, 17, 24, 64
[00 20] 032 : partial0.P-ENV levels            : 21, 38, 2b : -17, +6, -7
[00 23] 035 : partial0.P-ENV sustain level     : 35 : +3
[00 24] 036 : partial0.P-ENV end level         : 32 : 0
[00 25] 037 : partial0.P-LFO rate              : 35 : 53
[00 26] 038 : partial0.P-LFO depth             : 07 : 7
[00 27] 039 : partial0.P-LFO mod sens          : 0e : 14
[00 28] 040 : partial0.TVF cutoff freq         : 64 : 100
[00 29] 041 : partial0.TVF resonance           : 1e : 30
[00 2a] 042 : partial0.TVF keyfollow           : 07 : 1/2
[00 2b] 043 : partial0.TVF bias point          : 26 : <B_4
[00 2c] 044 : partial0.TVF bias level          : 0a : +3
[00 2d] 045 : partial0.TVF ENV depth           : 00 : 0
[00 2e] 046 : partial0.TVF ENV velo sens       : 1c : 28
[00 2f] 047 : partial0.TVF ENV depth keyfollow : 00 : 0
[00 30] 048 : partial0.TVF ENV time keyfollow  : 00 : 0
[00 31] 049 : partial0.TVF ENV times           : 00, 00, 64, 64, 64
[00 36] 054 : partial0.TVF ENV levels          : 64, 64, 00
[00 39] 057 : partial0.TVF ENV sustain level   : 00 : 0
[00 3a] 058 : partial0.TVA level               : 4b : 75
[00 3b] 059 : partial0.TVA velo sens           : 40 : 64
[00 3c] 060 : partial0.TVA bias point1         : 5b : >C_4
[00 3d] 061 : partial0.TVA bias level1         : 0c : 0
[00 3e] 062 : partial0.TVA bias point2         : 2e : <G_5
[00 3f] 063 : partial0.TVA bias level2         : 08 : -4
[00 40] 064 : partial0.TVA time keyfollow      : 02 : 2
[00 41] 065 : partial0.TVA time v_follow       : 04 : 4
[00 42] 066 : partial0.TVA times               : 00, 23, 53, 64, 53
[00 47] 071 : partial0.TVA levels              : 64, 5a, 00
[00 4a] 074 : partial0.TVA sustain level       : 00 : 0
[00 4b] 075 : partial1.WG pitch coarse         : 24 : C_4
[00 4c] 076 : partial1.WG pitch fine           : 2d : -5
[00 4d] 077 : partial1.WG pitch keyfollow      : 10 : s2
[00 4e] 078 : partial1.WG pitch benderSW       : 01 : on
[00 4f] 079 : partial1.WG wave form/pcm bank   : 01 : SAW/1
[00 50] 080 : partial1.WG pcm wave #           : 00 : 0
[00 51] 081 : partial1.WG pulse width          : 27 : 39
[00 52] 082 : partial1.WG PW velo sens         : 07 : 0
[00 53] 083 : partial1.P-ENV depth             : 02 : 2
[00 54] 084 : partial1.P-ENV velo sens         : 03 : 3
[00 55] 085 : partial1.P-ENV time keyfollow    : 04 : 4
[00 56] 086 : partial1.P-ENV times             : 0f, 17, 24, 64
[00 5a] 090 : partial1.P-ENV levels            : 43, 2c, 39 : +17, -6, +7
[00 5d] 093 : partial1.P-ENV sustain level     : 2f : -3
[00 5e] 094 : partial1.P-ENV end level         : 32 : 0
[00 5f] 095 : partial1.P-LFO rate              : 35 : 53
[00 60] 096 : partial1.P-LFO depth             : 06 : 6
[00 61] 097 : partial1.P-LFO mod sens          : 0e : 14
[00 62] 098 : partial1.TVF cutoff freq         : 64 : 100
[00 63] 099 : partial1.TVF resonance           : 1e : 30
[00 64] 100 : partial1.TVF keyfollow           : 07 : 1/2
[00 65] 101 : partial1.TVF bias point          : 27 : <C_5
[00 66] 102 : partial1.TVF bias level          : 0a : +3
[00 67] 103 : partial1.TVF ENV depth           : 00 : 0
[00 68] 104 : partial1.TVF ENV velo sens       : 1c : 28
[00 69] 105 : partial1.TVF ENV depth keyfollow : 00 : 0
[00 6a] 106 : partial1.TVF ENV time keyfollow  : 00 : 0
[00 6b] 107 : partial1.TVF ENV times           : 00, 00, 64, 64, 64
[00 70] 112 : partial1.TVF ENV levels          : 64, 64, 00
[00 73] 115 : partial1.TVF ENV sustain level   : 00 : 0
[00 74] 116 : partial1.TVA level               : 4b : 75
[00 75] 117 : partial1.TVA velo sens           : 40 : 64
[00 76] 118 : partial1.TVA bias point1         : 5b : >C_4
[00 77] 119 : partial1.TVA bias level1         : 0c : 0
[00 78] 120 : partial1.TVA bias point2         : 2e : <G_5
[00 79] 121 : partial1.TVA bias level2         : 08 : -4
[00 7a] 122 : partial1.TVA time keyfollow      : 02 : 2
[00 7b] 123 : partial1.TVA time v_follow       : 04 : 4
[00 7c] 124 : partial1.TVA times               : 00, 23, 53, 64, 53
[01 01] 129 : partial1.TVA levels              : 64, 5c, 00
[01 04] 132 : partial1.TVA sustain level       : 00 : 0
[01 05] 133 : partial2.WG pitch coarse         : 21 : A_3
[01 06] 134 : partial2.WG pitch fine           : 2d : -5
[01 07] 135 : partial2.WG pitch keyfollow      : 10 : s2
[01 08] 136 : partial2.WG pitch benderSW       : 01 : on
[01 09] 137 : partial2.WG wave form/pcm bank   : 00 : SQU/1
[01 0a] 138 : partial2.WG pcm wave #           : 69 : 105
[01 0b] 139 : partial2.WG pulse width          : 00 : 0
[01 0c] 140 : partial2.WG PW velo sens         : 07 : 0
[01 0d] 141 : partial2.P-ENV depth             : 00 : 0
[01 0e] 142 : partial2.P-ENV velo sens         : 00 : 0
[01 0f] 143 : partial2.P-ENV time keyfollow    : 04 : 4
[01 10] 144 : partial2.P-ENV times             : 00, 00, 00, 00
[01 14] 148 : partial2.P-ENV levels            : 32, 32, 32 : 0, 0, 0
[01 17] 151 : partial2.P-ENV sustain level     : 32 : 0
[01 18] 152 : partial2.P-ENV end level         : 32 : 0
[01 19] 153 : partial2.P-LFO rate              : 00 : 0
[01 1a] 154 : partial2.P-LFO depth             : 00 : 0
[01 1b] 155 : partial2.P-LFO mod sens          : 00 : 0
[01 1c] 156 : partial2.TVF cutoff freq         : 64 : 100
[01 1d] 157 : partial2.TVF resonance           : 1e : 30
[01 1e] 158 : partial2.TVF keyfollow           : 0b : 1
[01 1f] 159 : partial2.TVF bias point          : 00 : <A_1
[01 20] 160 : partial2.TVF bias level          : 07 : 0
[01 21] 161 : partial2.TVF ENV depth           : 00 : 0
[01 22] 162 : partial2.TVF ENV velo sens       : 00 : 0
[01 23] 163 : partial2.TVF ENV depth keyfollow : 00 : 0
[01 24] 164 : partial2.TVF ENV time keyfollow  : 00 : 0
[01 25] 165 : partial2.TVF ENV times           : 00, 00, 00, 00, 00
[01 2a] 170 : partial2.TVF ENV levels          : 00, 00, 00
[01 2d] 173 : partial2.TVF ENV sustain level   : 00 : 0
[01 2e] 174 : partial2.TVA level               : 42 : 66
[01 2f] 175 : partial2.TVA velo sens           : 3e : 62
[01 30] 176 : partial2.TVA bias point1         : 60 : >F_4
[01 31] 177 : partial2.TVA bias level1         : 04 : -8
[01 32] 178 : partial2.TVA bias point2         : 1b : <C_4
[01 33] 179 : partial2.TVA bias level2         : 06 : -6
[01 34] 180 : partial2.TVA time keyfollow      : 04 : 4
[01 35] 181 : partial2.TVA time v_follow       : 00 : 0
[01 36] 182 : partial2.TVA times               : 00, 1f, 58, 64, 58
[01 3b] 187 : partial2.TVA levels              : 64, 4d, 00
[01 3e] 190 : partial2.TVA sustain level       : 00 : 0
[01 3f] 191 : partial3.WG pitch coarse         : 1a : D_3
[01 40] 192 : partial3.WG pitch fine           : 38 : +6
[01 41] 193 : partial3.WG pitch keyfollow      : 10 : s2
[01 42] 194 : partial3.WG pitch benderSW       : 01 : on
[01 43] 195 : partial3.WG wave form/pcm bank   : 00 : SQU/1
[01 44] 196 : partial3.WG pcm wave #           : 65 : 101
[01 45] 197 : partial3.WG pulse width          : 00 : 0
[01 46] 198 : partial3.WG PW velo sens         : 07 : 0
[01 47] 199 : partial3.P-ENV depth             : 00 : 0
[01 48] 200 : partial3.P-ENV velo sens         : 00 : 0
[01 49] 201 : partial3.P-ENV time keyfollow    : 04 : 4
[01 4a] 202 : partial3.P-ENV times             : 00, 00, 00, 00
[01 4e] 206 : partial3.P-ENV levels            : 32, 32, 32 : 0, 0, 0
[01 51] 209 : partial3.P-ENV sustain level     : 32 : 0
[01 52] 210 : partial3.P-ENV end level         : 32 : 0
[01 53] 211 : partial3.P-LFO rate              : 41 : 65
[01 54] 212 : partial3.P-LFO depth             : 0b : 11
[01 55] 213 : partial3.P-LFO mod sens          : 1b : 27
[01 56] 214 : partial3.TVF cutoff freq         : 64 : 100
[01 57] 215 : partial3.TVF resonance           : 1e : 30
[01 58] 216 : partial3.TVF keyfollow           : 0b : 1
[01 59] 217 : partial3.TVF bias point          : 00 : <A_1
[01 5a] 218 : partial3.TVF bias level          : 07 : 0
[01 5b] 219 : partial3.TVF ENV depth           : 00 : 0
[01 5c] 220 : partial3.TVF ENV velo sens       : 00 : 0
[01 5d] 221 : partial3.TVF ENV depth keyfollow : 00 : 0
[01 5e] 222 : partial3.TVF ENV time keyfollow  : 00 : 0
[01 5f] 223 : partial3.TVF ENV times           : 00, 00, 00, 00, 00
[01 64] 228 : partial3.TVF ENV levels          : 00, 00, 00
[01 67] 231 : partial3.TVF ENV sustain level   : 00 : 0
[01 68] 232 : partial3.TVA level               : 31 : 49
[01 69] 233 : partial3.TVA velo sens           : 3b : 59
[01 6a] 234 : partial3.TVA bias point1         : 5b : >C_4
[01 6b] 235 : partial3.TVA bias level1         : 05 : -7
[01 6c] 236 : partial3.TVA bias point2         : 1b : <C_4
[01 6d] 237 : partial3.TVA bias level2         : 05 : -7
[01 6e] 238 : partial3.TVA time keyfollow      : 04 : 4
[01 6f] 239 : partial3.TVA time v_follow       : 00 : 0
[01 70] 240 : partial3.TVA times               : 00, 1f, 58, 64, 5a
[01 75] 245 : partial3.TVA levels              : 64, 4b, 00
[01 78] 248 : partial3.TVA sustain level       : 00 : 0    
    
    */
}
