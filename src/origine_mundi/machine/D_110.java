/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package origine_mundi.machine;

import java.util.Arrays;
import org.apache.commons.lang3.ArrayUtils;
import origine_mundi.OmUtil;
import static origine_mundi.OmUtil.MICRO_LITE_3;
import origine_mundi.SysexDataModel;
import origine_mundi.SysexDataModel.BitArray;
import origine_mundi.SysexDataModel.ByteValue;
import origine_mundi.SysexDataModel.ByteValues;
import origine_mundi.SysexDataModel.Characters;
import origine_mundi.SysexDataModel.CodeValue;
import origine_mundi.SysexDataModel.D110BiasPoint;
import origine_mundi.SysexDataModel.DataBlock;
import origine_mundi.SysexDataModel.KV;
import origine_mundi.SysexDataModel.MidiChannel;
import origine_mundi.SysexDataModel.NoteValue;
import origine_mundi.SysexDataModel.OffsetBinaries;
import origine_mundi.SysexDataModel.OffsetBinary;
import origine_mundi.SysexDataModel.OnOffValue;
import static origine_mundi.machine.Roland.ROLAND_ID;

/**
 *
 * @author Mina
 */
public class D_110 extends Roland {
    private static final int DEVICE_ID = 0x10; // SET ON D_110
    private static final int MODEL_ID = 0x16; //D_110
    private static final String MIDI_PORT = MICRO_LITE_3;
    private static D_110 instance = null;
    public static D_110 instance(){
        if(instance == null){
            instance = new D_110();
        }
        return instance;
    }
    private D_110(){
        super(DEVICE_ID, MODEL_ID, MIDI_PORT, MIDI_PORT);
    }
    private static final CodeValue PARTIAL_STRUCTURE = new CodeValue("partial structure model",
            new KV(0, "S & S Mix"), 
            new KV(1, "S & S Prim and Ring Mix"), 
            new KV(2, "P & S Mix"),
            new KV(3, "P & S Prim and Ring Mix"),
            new KV(4, "S & P Prim and Ring Mix"),
            new KV(5, "P & P Mix"),
            new KV(6, "P & P Prim and Ring Mix"),
            new KV(7, "S & S Stereo"),
            new KV(8, "P & P Stereo"),
            new KV(9, "S & S Ring"),
            new KV(10, "P & S Ring"),
            new KV(11, "S & P Ring"),
            new KV(12, "P & P Ring")
    );
    private static final DataBlock PARTIAL_BLOCK = new DataBlock("partial model",
            new NoteValue("WG pitch coarse", 0, 96, 24),
            new OffsetBinary("WG pitch fine", 0, 100, 50),
            new CodeValue("WG pitch keyfollow", 0, 0x10,
                    new KV(0x00, "-1" ), new KV(0x01, "-1/2"), new KV(0x02, "-1/4"), new KV(0x03, "0"  ), new KV(0x04, "1/8"), new KV(0x05, "1/4"), 
                    new KV(0x06, "3/8"), new KV(0x07, "1/2" ), new KV(0x08, "5/8" ), new KV(0x09, "3/4"), new KV(0x0a, "7/8"), new KV(0x0b, "1"), 
                    new KV(0x0c, "5/4"), new KV(0x0d, "3/2" ), new KV(0x0e, "2"   ), new KV(0x0f, "s1" ), new KV(0x10, "s2")),
            new OnOffValue("WG pitch benderSW", 0, 0, 1),
            new CodeValue("WG wave form/pcm bank", 0, 3, new KV(0, "SQU/1"), new KV(1, "SAW/1"), new KV(2, "SQU/2"), new KV(3, "SAW/2")),
            new ByteValue("WG pcm wave #"),
            new ByteValue("WG pulse width", 0, 100),
            new OffsetBinary("WG PW velo sens", 0, 14, 7),
            new ByteValue("P-ENV depth", 0, 10),
            new ByteValue("P-ENV velo sens", 0, 100),
            new ByteValue("P-ENV time keyfollow", 0, 4),
            new ByteValues("P-ENV times", 4, 0, 100),
            new OffsetBinaries("P-ENV levels", 3, 0, 100, 50),
            new OffsetBinary("P-ENV sustain level", 0, 100, 50),//50 50 50
            new OffsetBinary("P-ENV end level", 0, 100, 50),
            new ByteValue("P-LFO rate", 0, 100),
            new ByteValue("P-LFO depth", 0, 100),
            new ByteValue("P-LFO mod sens", 0, 100),
            new ByteValue("TVF cutoff freq", 0, 100),
            new ByteValue("TVF resonance", 0, 30),
            new CodeValue("TVF keyfollow", 0, 0x0e,
                    new KV(0x00, "-1" ), new KV(0x01, "-1/2"), new KV(0x02, "-1/4"), new KV(0x03, "0"  ), new KV(0x04, "1/8"), new KV(0x05, "1/4"), 
                    new KV(0x06, "3/8"), new KV(0x07, "1/2" ), new KV(0x08, "5/8" ), new KV(0x09, "3/4"), new KV(0x0a, "7/8"), new KV(0x0b, "1"), 
                    new KV(0x0c, "5/4"), new KV(0x0d, "3/2" ), new KV(0x0e, "2"   )),
            new D110BiasPoint("TVF bias point"),
            new OffsetBinary("TVF bias level", 0, 14, 7),
            new ByteValue("TVF ENV depth", 0, 100),
            new ByteValue("TVF ENV velo sens", 0, 100),
            new ByteValue("TVF ENV depth keyfollow", 0, 4),
            new ByteValue("TVF ENV time keyfollow", 0, 4),
            new ByteValues("TVF ENV times", 5, 0, 100),
            new ByteValues("TVF ENV levels", 3, 0, 100),
            new ByteValue("TVF ENV sustain level", 0, 100),
            new ByteValue("TVA level", 0, 100),
            new ByteValue("TVA velo sens", 0, 100),
            new D110BiasPoint("TVA bias point1"),
            new OffsetBinary("TVA bias level1", 0, 12, 12),
            new D110BiasPoint("TVA bias point2"),
            new OffsetBinary("TVA bias level2", 0, 12, 12),
            new ByteValue("TVA time keyfollow", 0, 4),
            new ByteValue("TVA time v_follow", 0, 4),
            new ByteValues("TVA times", 5, 0, 100),
            new ByteValues("TVA levels", 3, 0, 100),
            new ByteValue("TVA sustain level", 0, 100)
        );
    private static SysexDataModel TONE = new SysexDataModel("tone",
            new ByteValues("address", 3),
            new DataBlock("common",
                new Characters("name", 10),
                PARTIAL_STRUCTURE.copy("partial structure 0 & 1"),
                PARTIAL_STRUCTURE.copy("partial structure 2 & 3"),
                new BitArray("partial mute", "bit:0000[3][2][1][0]", 4, true),
                new CodeValue("env mode", 0, 1, new KV(0, "Normal"), new KV(1, "No sustain"))),
            PARTIAL_BLOCK.copy("partial0"),
            PARTIAL_BLOCK.copy("partial1"),
            PARTIAL_BLOCK.copy("partial2"),
            PARTIAL_BLOCK.copy("partial3")
        );
    public static int[][] TONE_TEMP = new int[][]{
        new int[]{0x04, 0x00, 0x00, 0x45, 0x6c, 0x65, 0x63, 0x50, 0x69, 0x61, 0x6e, 0x6f, 0x31, 0x01, 0x00, 0x07, 0x00, 0x24, 0x37, 0x0f, 0x01, 0x00, 0x00, 0x3c, 0x07, 0x03, 0x00, 0x01, 0x0a, 0x07, 0x16, 0x00, 0x32, 0x42, 0x33, 0x32, 0x32, 0x00, 0x00, 0x00, 0x35, 0x00, 0x07, 0x16, 0x08, 0x29, 0x28, 0x00, 0x02, 0x00, 0x20, 0x3b, 0x64, 0x52, 0x64, 0x47, 0x29, 0x00, 0x5a, 0x55, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x00, 0x00, 0x32, 0x47, 0x64, 0x38, 0x64, 0x52, 0x28, 0x00, 0x4e, 0x47, 0x07, 0x01, 0x00, 0x00, 0x21, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x1d, 0x01, 0x09, 0x61, 0x0a, 0x64, 0x00, 0x00, 0x03, 0x00, 0x1a, 0x40, 0x4b, 0x1d, 0x64, 0x38, 0x14, 0x00, 0x47, 0x3c, 0x5b, 0x0c, 0x33, 0x08, 0x01, 0x01, 0x00, 0x28, 0x3d, 0x4a, 0x64, 0x64, 0x36, 0x23, 0x06, 0x30, 0x2d, 0x0f, 0x01, 0x01, 0x00, 0x3c, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x32, 0x34, 0x30, 0x30, 0x31, 0x3e, 0x08, 0x42, 0x37, 0x00, 0x07, 0x16, 0x09, 0x28, 0x28, 0x00, 0x02, 0x00, 0x18, 0x3b, 0x64, 0x52, 0x64, 0x47, 0x29, 0x00, 0x5a, 0x55, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x00, 0x00, 0x32, 0x47, 0x64, 0x33, 0x64, 0x52, 0x28, 0x00, 0x30, 0x2d, 0x0f, 0x01, 0x01, 0x00, 0x3c, 0x07, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x32, 0x34, 0x30, 0x30, 0x31, 0x3e, 0x08, 0x42, 0x37, 0x00, 0x07, 0x16, 0x09, 0x28, 0x28, 0x00, 0x02, 0x00, 0x18, 0x3b, 0x64, 0x52, 0x64, 0x47, 0x29, 0x00, 0x5a, 0x55, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x00, 0x00, 0x32, 0x47, 0x64, 0x33, 0x64, 0x52, 0x28, 0x00},
        new int[]{0x04, 0x01, 0x76, 0x53, 0x79, 0x6e, 0x20, 0x42, 0x61, 0x73, 0x73, 0x20, 0x33, 0x00, 0x00, 0x03, 0x00, 0x18, 0x39, 0x10, 0x01, 0x01, 0x00, 0x2c, 0x06, 0x06, 0x03, 0x00, 0x01, 0x00, 0x03, 0x29, 0x32, 0x64, 0x2a, 0x32, 0x29, 0x40, 0x07, 0x1e, 0x3c, 0x0f, 0x09, 0x30, 0x09, 0x32, 0x64, 0x00, 0x01, 0x00, 0x18, 0x1e, 0x32, 0x2d, 0x64, 0x64, 0x52, 0x28, 0x62, 0x41, 0x5b, 0x0a, 0x1b, 0x0c, 0x02, 0x04, 0x00, 0x0f, 0x1a, 0x5f, 0x3c, 0x64, 0x5c, 0x54, 0x23, 0x18, 0x2c, 0x10, 0x01, 0x00, 0x00, 0x3b, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3d, 0x0f, 0x38, 0x3c, 0x17, 0x09, 0x30, 0x09, 0x32, 0x64, 0x00, 0x01, 0x00, 0x18, 0x2c, 0x32, 0x2d, 0x63, 0x53, 0x37, 0x28, 0x5f, 0x41, 0x5b, 0x09, 0x1b, 0x0a, 0x02, 0x04, 0x00, 0x0f, 0x1a, 0x5f, 0x3c, 0x64, 0x5c, 0x54, 0x23, 0x18, 0x2c, 0x10, 0x01, 0x00, 0x00, 0x3b, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3d, 0x0f, 0x38, 0x3c, 0x17, 0x09, 0x30, 0x09, 0x32, 0x64, 0x00, 0x01, 0x00, 0x18, 0x2c, 0x32, 0x2d, 0x63, 0x53, 0x37, 0x28, 0x5f, 0x41, 0x5b, 0x09, 0x1b, 0x0a, 0x02, 0x04, 0x00, 0x0f, 0x1a, 0x5f, 0x3c, 0x64, 0x5c, 0x54, 0x23, 0x18, 0x2c, 0x10, 0x01, 0x00, 0x00, 0x3b, 0x07, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3d, 0x0f, 0x38, 0x3c, 0x17, 0x09, 0x30, 0x09, 0x32, 0x64, 0x00, 0x01, 0x00, 0x18, 0x2c, 0x32, 0x2d, 0x63, 0x53, 0x37, 0x28, 0x5f, 0x41, 0x5b, 0x09, 0x1b, 0x0a, 0x02, 0x04, 0x00, 0x0f, 0x1a, 0x5f, 0x3c, 0x64, 0x5c, 0x54, 0x23},
        new int[]{0x04, 0x03, 0x6c, 0x46, 0x72, 0x65, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x32, 0x02, 0x00, 0x03, 0x00, 0x24, 0x32, 0x10, 0x01, 0x00, 0x39, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x3e, 0x5b, 0x09, 0x1b, 0x0c, 0x00, 0x00, 0x0c, 0x26, 0x37, 0x2d, 0x2e, 0x64, 0x5f, 0x00, 0x00, 0x24, 0x3c, 0x10, 0x01, 0x01, 0x00, 0x52, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3c, 0x0b, 0x4d, 0x3e, 0x0d, 0x0b, 0x1e, 0x0a, 0x1d, 0x0c, 0x00, 0x01, 0x07, 0x21, 0x28, 0x34, 0x64, 0x0d, 0x36, 0x1b, 0x00, 0x4b, 0x4b, 0x5b, 0x09, 0x1b, 0x0c, 0x04, 0x00, 0x16, 0x1b, 0x39, 0x54, 0x42, 0x49, 0x64, 0x43, 0x00, 0x24, 0x3c, 0x10, 0x01, 0x01, 0x00, 0x52, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3c, 0x0b, 0x4d, 0x3e, 0x0d, 0x0b, 0x1e, 0x0a, 0x1d, 0x0c, 0x00, 0x01, 0x07, 0x21, 0x28, 0x34, 0x64, 0x0d, 0x36, 0x1b, 0x00, 0x4b, 0x4b, 0x5b, 0x09, 0x1b, 0x0c, 0x04, 0x00, 0x16, 0x1b, 0x39, 0x54, 0x42, 0x49, 0x64, 0x43, 0x00, 0x24, 0x3c, 0x10, 0x01, 0x01, 0x00, 0x52, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3c, 0x0b, 0x4d, 0x3e, 0x0d, 0x0b, 0x1e, 0x0a, 0x1d, 0x0c, 0x00, 0x01, 0x07, 0x21, 0x28, 0x34, 0x64, 0x0d, 0x36, 0x1b, 0x00, 0x4b, 0x4b, 0x5b, 0x09, 0x1b, 0x0c, 0x04, 0x00, 0x16, 0x1b, 0x39, 0x54, 0x42, 0x49, 0x64, 0x43, 0x00},
        new int[]{0x04, 0x05, 0x62, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x20, 0x50, 0x61, 0x64, 0x20, 0x07, 0x02, 0x07, 0x00, 0x24, 0x37, 0x10, 0x01, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x40, 0x0c, 0x23, 0x2c, 0x0a, 0x08, 0x33, 0x0a, 0x3c, 0x64, 0x02, 0x03, 0x0f, 0x04, 0x20, 0x2d, 0x39, 0x52, 0x1f, 0x61, 0x3a, 0x5f, 0x4e, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x04, 0x06, 0x0a, 0x0a, 0x11, 0x3a, 0x3c, 0x5c, 0x64, 0x64, 0x24, 0x2d, 0x10, 0x01, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x3e, 0x0c, 0x31, 0x2c, 0x0a, 0x08, 0x33, 0x0a, 0x3c, 0x64, 0x02, 0x00, 0x0f, 0x04, 0x20, 0x2d, 0x39, 0x52, 0x1f, 0x61, 0x3a, 0x5f, 0x4e, 0x5b, 0x0c, 0x1b, 0x0c, 0x02, 0x04, 0x00, 0x05, 0x0a, 0x11, 0x3a, 0x54, 0x5f, 0x64, 0x64, 0x1f, 0x32, 0x0b, 0x01, 0x00, 0x2a, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x64, 0x6f, 0x05, 0x1b, 0x06, 0x00, 0x00, 0x00, 0x3c, 0x41, 0x00, 0x48, 0x64, 0x4a, 0x00, 0x00, 0x1f, 0x32, 0x0b, 0x01, 0x00, 0x2a, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x64, 0x6f, 0x05, 0x1b, 0x06, 0x00, 0x00, 0x00, 0x3c, 0x41, 0x00, 0x48, 0x64, 0x4a, 0x00, 0x00},
        new int[]{0x04, 0x07, 0x58, 0x54, 0x72, 0x75, 0x6d, 0x70, 0x65, 0x74, 0x20, 0x32, 0x20, 0x02, 0x00, 0x03, 0x00, 0x24, 0x25, 0x0f, 0x01, 0x00, 0x24, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x3c, 0x67, 0x07, 0x1b, 0x06, 0x02, 0x01, 0x00, 0x27, 0x34, 0x3a, 0x28, 0x64, 0x64, 0x45, 0x00, 0x30, 0x32, 0x0f, 0x01, 0x01, 0x00, 0x00, 0x07, 0x06, 0x01, 0x00, 0x0b, 0x0b, 0x1c, 0x24, 0x41, 0x27, 0x37, 0x32, 0x34, 0x38, 0x05, 0x1a, 0x49, 0x10, 0x09, 0x1f, 0x0a, 0x39, 0x51, 0x00, 0x03, 0x19, 0x21, 0x24, 0x2d, 0x52, 0x4b, 0x60, 0x38, 0x19, 0x58, 0x45, 0x6c, 0x05, 0x1b, 0x0c, 0x02, 0x03, 0x08, 0x2d, 0x34, 0x2b, 0x23, 0x64, 0x64, 0x60, 0x5a, 0x30, 0x32, 0x0f, 0x01, 0x01, 0x00, 0x00, 0x07, 0x06, 0x01, 0x00, 0x0b, 0x0b, 0x1c, 0x24, 0x41, 0x27, 0x37, 0x32, 0x34, 0x38, 0x05, 0x1a, 0x49, 0x10, 0x09, 0x1f, 0x0a, 0x39, 0x51, 0x00, 0x03, 0x19, 0x21, 0x24, 0x2d, 0x52, 0x4b, 0x60, 0x38, 0x19, 0x58, 0x45, 0x6c, 0x05, 0x1b, 0x0c, 0x02, 0x03, 0x08, 0x2d, 0x34, 0x2b, 0x23, 0x64, 0x64, 0x60, 0x5a, 0x30, 0x32, 0x0f, 0x01, 0x01, 0x00, 0x00, 0x07, 0x06, 0x01, 0x00, 0x0b, 0x0b, 0x1c, 0x24, 0x41, 0x27, 0x37, 0x32, 0x34, 0x38, 0x05, 0x1a, 0x49, 0x10, 0x09, 0x1f, 0x0a, 0x39, 0x51, 0x00, 0x03, 0x19, 0x21, 0x24, 0x2d, 0x52, 0x4b, 0x60, 0x38, 0x19, 0x58, 0x45, 0x6c, 0x05, 0x1b, 0x0c, 0x02, 0x03, 0x08, 0x2d, 0x34, 0x2b, 0x23, 0x64, 0x64, 0x60, 0x5a},
        new int[]{0x04, 0x09, 0x4e, 0x48, 0x6f, 0x6e, 0x6b, 0x79, 0x2d, 0x54, 0x6f, 0x6e, 0x6b, 0x01, 0x02, 0x07, 0x00, 0x24, 0x3c, 0x10, 0x01, 0x00, 0x00, 0x44, 0x08, 0x04, 0x00, 0x01, 0x02, 0x00, 0x07, 0x00, 0x32, 0x64, 0x30, 0x32, 0x32, 0x38, 0x04, 0x43, 0x32, 0x00, 0x06, 0x16, 0x08, 0x43, 0x47, 0x00, 0x02, 0x00, 0x05, 0x3b, 0x47, 0x52, 0x64, 0x47, 0x29, 0x18, 0x64, 0x55, 0x69, 0x0a, 0x1b, 0x0c, 0x01, 0x00, 0x00, 0x32, 0x47, 0x4a, 0x43, 0x64, 0x52, 0x28, 0x00, 0x50, 0x4f, 0x0f, 0x01, 0x00, 0x00, 0x21, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x54, 0x10, 0x06, 0x67, 0x06, 0x64, 0x00, 0x00, 0x02, 0x00, 0x1d, 0x48, 0x4b, 0x1d, 0x58, 0x64, 0x00, 0x00, 0x2d, 0x46, 0x5b, 0x0c, 0x0f, 0x06, 0x01, 0x01, 0x00, 0x28, 0x3d, 0x4a, 0x28, 0x64, 0x3f, 0x28, 0x1e, 0x3c, 0x2e, 0x10, 0x01, 0x00, 0x5c, 0x00, 0x07, 0x02, 0x00, 0x01, 0x07, 0x03, 0x07, 0x00, 0x32, 0x46, 0x30, 0x32, 0x32, 0x38, 0x05, 0x48, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x55, 0x7a, 0x04, 0x5d, 0x0a, 0x01, 0x00, 0x01, 0x32, 0x47, 0x4a, 0x43, 0x64, 0x52, 0x28, 0x00, 0x3c, 0x2e, 0x10, 0x01, 0x00, 0x5c, 0x00, 0x07, 0x02, 0x00, 0x01, 0x07, 0x03, 0x07, 0x00, 0x32, 0x46, 0x30, 0x32, 0x32, 0x38, 0x05, 0x48, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x55, 0x7a, 0x04, 0x5d, 0x0a, 0x01, 0x00, 0x01, 0x32, 0x47, 0x4a, 0x43, 0x64, 0x52, 0x28, 0x00},
        new int[]{0x04, 0x0b, 0x44, 0x53, 0x69, 0x74, 0x61, 0x72, 0x20, 0x20, 0x20, 0x20, 0x20, 0x05, 0x07, 0x0f, 0x00, 0x24, 0x2d, 0x10, 0x01, 0x00, 0x59, 0x00, 0x07, 0x01, 0x01, 0x00, 0x11, 0x10, 0x17, 0x00, 0x24, 0x2c, 0x30, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x57, 0x5b, 0x0c, 0x1b, 0x09, 0x00, 0x00, 0x02, 0x47, 0x34, 0x3f, 0x54, 0x5c, 0x34, 0x11, 0x00, 0x24, 0x34, 0x10, 0x01, 0x00, 0x56, 0x00, 0x07, 0x01, 0x01, 0x00, 0x0b, 0x0a, 0x0f, 0x00, 0x20, 0x38, 0x31, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x46, 0x5b, 0x07, 0x1b, 0x09, 0x00, 0x04, 0x00, 0x03, 0x3d, 0x57, 0x4e, 0x00, 0x64, 0x35, 0x00, 0x30, 0x32, 0x10, 0x01, 0x01, 0x00, 0x40, 0x07, 0x07, 0x03, 0x00, 0x0f, 0x10, 0x22, 0x32, 0x17, 0x21, 0x29, 0x32, 0x32, 0x34, 0x0a, 0x00, 0x55, 0x15, 0x09, 0x5b, 0x04, 0x56, 0x2c, 0x00, 0x00, 0x00, 0x2a, 0x2b, 0x37, 0x47, 0x2c, 0x12, 0x21, 0x0d, 0x52, 0x4b, 0x5b, 0x0c, 0x1b, 0x08, 0x00, 0x04, 0x05, 0x29, 0x2b, 0x53, 0x54, 0x64, 0x60, 0x4a, 0x00, 0x3c, 0x36, 0x10, 0x01, 0x01, 0x00, 0x64, 0x07, 0x06, 0x03, 0x00, 0x07, 0x11, 0x1c, 0x32, 0x17, 0x1d, 0x27, 0x32, 0x32, 0x34, 0x0c, 0x00, 0x3c, 0x0e, 0x09, 0x5b, 0x03, 0x54, 0x2d, 0x00, 0x00, 0x00, 0x23, 0x37, 0x4a, 0x64, 0x54, 0x0a, 0x40, 0x00, 0x54, 0x4b, 0x5b, 0x0c, 0x1b, 0x09, 0x00, 0x04, 0x0e, 0x0c, 0x31, 0x58, 0x53, 0x00, 0x64, 0x5a, 0x00},
        new int[]{0x04, 0x0d, 0x3a, 0x4f, 0x6e, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x4a, 0x61, 0x6d, 0x05, 0x08, 0x0f, 0x00, 0x22, 0x32, 0x05, 0x00, 0x02, 0x64, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c, 0x00, 0x00, 0x00, 0x64, 0x64, 0x64, 0x46, 0x64, 0x64, 0x64, 0x64, 0x22, 0x32, 0x05, 0x00, 0x02, 0x6f, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c, 0x00, 0x00, 0x3a, 0x39, 0x00, 0x64, 0x46, 0x00, 0x00, 0x64, 0x64, 0x16, 0x32, 0x05, 0x00, 0x02, 0x63, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c, 0x00, 0x00, 0x1a, 0x23, 0x23, 0x14, 0x64, 0x64, 0x64, 0x64, 0x64, 0x22, 0x32, 0x05, 0x00, 0x02, 0x24, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x32, 0x32, 0x32, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x4b, 0x5b, 0x0c, 0x1b, 0x0c, 0x04, 0x00, 0x64, 0x64, 0x34, 0x00, 0x46, 0x00, 0x00, 0x07, 0x64}};
    public static int[] MIDI_CHANNELS_RQT = new int[]{0x10, 0x0, 0xd, 0x00, 0x00, 0x09};
    public static int[] MIDI_CHANNELS_DATA = new int[]{0x10, 0x0, 0xd, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
    public static SysexDataModel MIDI_CHANNELS = new SysexDataModel("Part MIDI Channels",
                        new ByteValues("address", 3),
                        new MidiChannel("part0"), new MidiChannel("part1"), new MidiChannel("part2"), new MidiChannel("part3"),
                        new MidiChannel("part4"), new MidiChannel("part5"), new MidiChannel("part6"), new MidiChannel("part7"),
                        new MidiChannel("partR"));
    public static void main(String[] arg) throws Exception {
        //for(int[] tone_temp:TONE_TEMP){
        //    TONE.getExplanations(OmUtil.toList(tone_temp)).print();
        //}
        //MIDI_CHANNELS.getExplanations(OmUtil.toList(MIDI_CHANNELS_DATA)).print();
        SysexBuilder sb = 
                new SysexBuilder(new int[]{ROLAND_ID, DEVICE_ID, MODEL_ID, COMMAND_DT1}, TONE, Arrays.asList(ArrayUtils.toObject(TONE_TEMP[0])), true);
        sb.getExplanations().print();
        sb.setCharacters("common.name", "abcasdfasdfasdf");
        sb.setValue("partial3.TVA time keyfollow", 3);
        sb.setValue("partial3.TVA levels", 1, 2, 3);
        sb.getExplanations().print();
        
        /*D_110 d_110 = D_110.instance();
        d_110.get(d_110.getRQT(new Address(0x04, 0x00, 0x00), new Address(0x00, 0x01, 0x76)), model).getExplanations().print();
        SysexBuilder sb = d_110.getDT1(TONE, data);
        d_110.send(sb.getSysex());
        d_110.finalize();
        */
        
        //d110.send(d110.TEMPORARY_TONE[0].getSysex());
        //checkSound(D_110, 0);
        /*d110.send(d110.getDT1(new Address(0x10, 0x0, 0xd), new int[]{0x00, 0x01, 0x01, 0x04, 0x01, 0x01, 0x07, 0x08, 0x09}).getSysex());*/
        
        //d110.getRQT(new Address(0x10, 0x0, 0xd), new Address(0, 0, 9)).getExplanations().print();
        
        /*D_110 d110 = D_110.instance();
        SysexBuilder ret = d110.get(d110.getRQT(new Address(0x10, 0x0, 0xd), new Address(0, 0, 9)), 
                new SysexDataModel("Part MIDI Channels",
                        new ByteValues("address", 3),
                        new MidiChannel("part0"),
                        new MidiChannel("part1"),
                        new MidiChannel("part2"),
                        new MidiChannel("part3"),
                        new MidiChannel("part4"),
                        new MidiChannel("part5"),
                        new MidiChannel("part6"),
                        new MidiChannel("part7"),
                        new MidiChannel("partR")
                ));
        ret.getExplanations().print();
        //d110.checkSound(0);
        
        d110.finalize();*/
    }
    
    
    
}
